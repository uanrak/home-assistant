blueprint:
  name: "Control de luces por sensores de presencia y puertas"
  description: "Enciende luces si algún sensor de presencia está ocupado. Apaga las luces tras un tiempo sin detección. También enciende luces si una puerta se abre y no hay presencia. Además, se activan si la iluminación ambiental es insuficiente."
  domain: automation
  input:
    sensores_presencia:
      name: Sensores de presencia
      description: "Selecciona los sensores de presencia a monitorear."
      selector:
        entity:
          domain: binary_sensor
          device_class: motion
          multiple: true

    luces:
      name: Luces
      description: "Selecciona las luces que se encenderán y apagarán automáticamente."
      selector:
        entity:
          domain: light
          multiple: true

    sensores_puerta:
      name: Sensores de puerta (opcional)
      description: "Selecciona los sensores de puerta que activarán las luces."
      default: []
      selector:
        entity:
          domain: binary_sensor
          multiple: true

    sensor_luz:
      name: Sensor de luz (opcional)
      description: "Selecciona el sensor de luz que determinará si la iluminación ambiental es insuficiente."
      default: ""
      selector:
        entity:
          domain: sensor
          device_class: illuminance

    umbral_luz:
      name: Umbral de luz (opcional)
      description: "Nivel de iluminación (en lux) por debajo del cual las luces se encenderán automáticamente."
      default: 5000
      selector:
        number:
          min: 0
          max: 5000
          unit_of_measurement: "lux"

    tiempo_apagado:
      name: Tiempo de apagado
      description: "Tiempo en minutos antes de apagar las luces si no hay presencia. Si es 0, se apagarán inmediatamente."
      default: 1
      selector:
        number:
          min: 1
          max: 60
          unit_of_measurement: "minutos"

    solo_noche:
      name: "Solo encender después de la puesta del sol"
      description: "Si está activado, las luces solo se encenderán después de la puesta del sol."
      default: false
      selector:
        boolean:

mode: restart

trigger:
  - platform: state
    entity_id: !input sensores_presencia
    to: "on"
    id: "presencia_detectada"

  - platform: state
    entity_id: !input sensores_presencia
    to: "off"
    for:
      minutes: !input tiempo_apagado
    id: "sin_presencia"

  - platform: state
    entity_id: !input sensores_puerta
    to: "on"
    id: "puerta_abierta"
    enabled: "{{ sensores_puerta | count > 0 }}"

  - platform: numeric_state
    entity_id: !input sensor_luz
    below: !input umbral_luz
    id: "baja_iluminacion"
    enabled: "{{ sensor_luz | length > 0 }}"

condition: []

action:
  - variables:
      solo_noche_var: !input solo_noche
      sensor_luz_var: !input sensor_luz
      sensores_puerta_var: !input sensores_puerta

  - choose:
      - conditions:
          - condition: trigger
            id: "presencia_detectada"
          - condition: or
            conditions:
              - condition: template
                value_template: "{{ not solo_noche_var }}"
              - condition: sun
                after: sunset
          - condition: template
            value_template: "{{ sensor_luz_var == '' or states(sensors_luz_var) | float < umbral_luz }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: !input luces

      - conditions:
          - condition: trigger
            id: "sin_presencia"
        sequence:
          - service: light.turn_off
            target:
              entity_id: !input luces

      - conditions:
          - condition: trigger
            id: "puerta_abierta"
          - condition: state
            entity_id: !input sensores_presencia
            state: "off"
          - condition: or
            conditions:
              - condition: template
                value_template: "{{ not solo_noche_var }}"
              - condition: sun
                after: sunset
          - condition: template
            value_template: "{{ sensor_luz_var == '' or states(sensor_luz_var) | float < umbral_luz }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: !input luces
